//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { PlayerEntity } from './db/Player.entity';
import { MatchEntity } from './db/Match.entity';
import { PlayerstatisticEntity } from './db/Playerstatistic.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      PlayerEntity,
      MatchEntity,
      PlayerstatisticEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Player: [
        { name: 'Alex Carter', position: 'Forward', jersey_number: 9, age: 24 },
        {
          name: 'Miguel Santos',
          position: 'Midfielder',
          jersey_number: 8,
          age: 27,
        },
        {
          name: "Liam O'Brien",
          position: 'Defender',
          jersey_number: 4,
          age: 22,
        },
        {
          name: 'Ethan Kim',
          position: 'Goalkeeper',
          jersey_number: 1,
          age: 25,
        },
        { name: 'Samuel Lee', position: 'Forward', jersey_number: 11, age: 21 },
      ],
      Match: [
        {
          date: '2024-04-15T15:00:00Z',
          opponent: 'Redwood Rangers',
          final_score: '3-1',
          location: 'Stadium A',
        },
        {
          date: '2024-04-22T18:30:00Z',
          opponent: 'Blue Lake FC',
          final_score: '2-2',
          location: 'Stadium B',
        },
        {
          date: '2024-05-01T17:00:00Z',
          opponent: 'Greenfield United',
          final_score: '1-0',
          location: 'Stadium A',
        },
        {
          date: '2024-05-10T16:00:00Z',
          opponent: 'Sunset City',
          final_score: '0-2',
          location: 'Stadium C',
        },
        {
          date: '2024-05-18T19:00:00Z',
          opponent: 'Riverport FC',
          final_score: '4-3',
          location: 'Stadium B',
        },
      ],
      Playerstatistic: [
        {
          player_id: 1,
          match_id: 2,
          goals: 2,
          assists: 1,
          appearances: 1,
          minutes_played: 90,
        },
        {
          player_id: 3,
          match_id: 1,
          goals: 0,
          assists: 2,
          appearances: 1,
          minutes_played: 75,
        },
        {
          player_id: 2,
          match_id: 4,
          goals: 1,
          assists: 0,
          appearances: 1,
          minutes_played: 60,
        },
        {
          player_id: 4,
          match_id: 3,
          goals: 0,
          assists: 0,
          appearances: 1,
          minutes_played: 45,
        },
        {
          player_id: 5,
          match_id: 5,
          goals: 3,
          assists: 1,
          appearances: 1,
          minutes_played: 90,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('PlayerEntity', data.Player);
      await this.SeedResource('MatchEntity', data.Match);
      await this.SeedResource('PlayerstatisticEntity', data.Playerstatistic);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
